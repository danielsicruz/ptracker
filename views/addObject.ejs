<!DOCTYPE html>
<html lang="pt-br" data-bs-theme="auto">
  <head>
    <script src="/assets/js/color-modes.js"></script>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="" />
    <meta
      name="author"
      content="Mark Otto, Jacob Thornton, and Bootstrap contributors"
    />
    <meta name="generator" content="Hugo 0.115.4" />
    <title><%- pageName %> · Ptracker</title>

    <link
      rel="canonical"
      href="https://getbootstrap.com/docs/5.3/examples/dashboard/"
    />

    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@docsearch/css@3"
    />

    <link href="/assets/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Custom styles for this template -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css"
      rel="stylesheet"
    />
    <!-- Custom styles for this template -->
    <link href="/assets/css/dashboard.css" rel="stylesheet" />
    <link href="/assets/css/style.css" rel="stylesheet" />
  </head>

  <body>
    <%- include('./components/modalPlaces') %> <%-
    include('./components/themeSwitch') %>

    <header
      class="navbar sticky-top bg-dark flex-md-nowrap p-0 shadow"
      data-bs-theme="dark"
    >
      <a
        class="navbar-brand col-md-3 col-lg-2 me-0 px-3 fs-6 text-white"
        href="#"
        ><img src="/assets/images/Sesi-SP.jpg" width="130px"
      /></a>

      <ul class="navbar-nav flex-row d-md-none">
        <li class="nav-item text-nowrap">
          <button
            class="nav-link px-3 text-white"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSearch"
            aria-controls="navbarSearch"
            aria-expanded="false"
            aria-label="Toggle search"
          >
            <svg class="bi">
              <use xlink:href="#search" />
            </svg>
          </button>
        </li>
        <li class="nav-item text-nowrap">
          <button
            class="nav-link px-3 text-white"
            type="button"
            data-bs-toggle="offcanvas"
            data-bs-target="#sidebarMenu"
            aria-controls="sidebarMenu"
            aria-expanded="false"
            aria-label="Toggle navigation"
          >
            <svg class="bi">
              <use xlink:href="#list" />
            </svg>
          </button>
        </li>
      </ul>

      <div id="navbarSearch" class="navbar-search w-100 collapse">
        <input
          class="form-control w-100 rounded-0 border-0"
          type="text"
          placeholder="Search"
          aria-label="Search"
        />
      </div>
    </header>

    <div class="container-fluid">
      <div class="row">
        <%- include('./components/sidebar') %>

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <div class="container">
            <div class="row">
              <div class="row">
                <h3 class="pt-3">Adicionando objetos</h3>
              </div>
              <div id="objectData" class="row row-cols-1 row-cols-md-3 g-4">
                <div id="imgDiv" class="col-md-5 col-lg-4 order-md-last">
                  <label class="custum-file-upload" for="imageInput">
                    <img
                      class="img-fluid"
                      id="preview"
                      type="file"
                      name="image"
                    />

                    <div class="icon" id="uploadIcon">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill=""
                        viewBox="0 0 24 24"
                      >
                        <g stroke-width="0" id="SVGRepo_bgCarrier"></g>
                        <g
                          stroke-linejoin="round"
                          stroke-linecap="round"
                          id="SVGRepo_tracerCarrier"
                        ></g>
                        <g id="SVGRepo_iconCarrier">
                          <path
                            fill=""
                            d="M10 1C9.73478 1 9.48043 1.10536 9.29289 1.29289L3.29289 7.29289C3.10536 7.48043 3 7.73478 3 8V20C3 21.6569 4.34315 23 6 23H7C7.55228 23 8 22.5523 8 22C8 21.4477 7.55228 21 7 21H6C5.44772 21 5 20.5523 5 20V9H10C10.5523 9 11 8.55228 11 8V3H18C18.5523 3 19 3.44772 19 4V9C19 9.55228 19.4477 10 20 10C20.5523 10 21 9.55228 21 9V4C21 2.34315 19.6569 1 18 1H10ZM9 7H6.41421L9 4.41421V7ZM14 15.5C14 14.1193 15.1193 13 16.5 13C17.8807 13 19 14.1193 19 15.5V16V17H20C21.1046 17 22 17.8954 22 19C22 20.1046 21.1046 21 20 21H13C11.8954 21 11 20.1046 11 19C11 17.8954 11.8954 17 13 17H14V16V15.5ZM16.5 11C14.142 11 12.2076 12.8136 12.0156 15.122C10.2825 15.5606 9 17.1305 9 19C9 21.2091 10.7909 23 13 23H20C22.2091 23 24 21.2091 24 19C24 17.1305 22.7175 15.5606 20.9844 15.122C20.7924 12.8136 18.858 11 16.5 11Z"
                            clip-rule="evenodd"
                            fill-rule="evenodd"
                          ></path>
                        </g>
                      </svg>
                    </div>
                    <div class="text" id="uploadText">
                      <span>Clique aqui para enviar imagem</span>
                    </div>
                    <input type="file" id="imageInput" />
                  </label>
                </div>
                <div class="col-md-7 col-lg-8">
                  <form class="needs-validation" novalidate>
                    <div class="row g-3">
                      <div class="col-sm-6">
                        <label for="objectId" class="form-label">Id</label>
                        <input
                          type="text"
                          class="form-control"
                          id="objectId"
                          placeholder=""
                          value=""
                          required
                        />
                      </div>

                      <div class="col-sm-6">
                        <label for="objectName" class="form-label">Nome</label>
                        <input
                          type="text"
                          class="form-control"
                          id="objectName"
                          placeholder=""
                          value=""
                          required
                        />
                      </div>

                      <div class="col-12">
                        <label for="description" class="form-label"
                          >Descrição</label
                        >
                        <div class="input-group has-validation">
                          <textarea
                            class="form-control"
                            id="description"
                            placeholder=""
                            required
                          ></textarea>
                        </div>
                      </div>
                      <div class="col-12">
                        <label for="contextList" class="form-label"
                          >Inserido em</label
                        >
                        <div class="dropdown">
                          <button
                            class="btn btn-secondary dropdown-toggle"
                            type="button"
                            data-bs-toggle="dropdown"
                            aria-expanded="false"
                            id="contextButton"
                          >
                            Contexto
                          </button>
                          <ul class="dropdown-menu" id="contextList"></ul>
                          <button
                            class="btn btn-secondary"
                            type="button"
                            data-bs-toggle="modal"
                            data-bs-target="#placesModal"
                            id="placesButton"
                            hidden
                          >
                            Selecione um ambiente
                          </button>
                        </div>
                      </div>
                    </div>
                  </form>
                  <div class="mx-auto pt-3 text-center">
                    <button class="btn btn-secondary" id="btnSimilar">
                      Clique aqui para adicionar objetos similares
                    </button>
                    <button
                      class="btn btn-outline-success px-4 col-3 mx-auto"
                      type="button"
                      id="saveButton"
                    >
                      Salvar
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div id="similarDiv" hidden class="row row-cols-md-2 pt-3">
              <div id="similarInputDiv1" class="col-sm-3 p-2">
                <input
                  type="text"
                  class="form-control"
                  id="similarInput1"
                  placeholder=""
                  value=""
                  onkeydown="testForRender(event)"
                />
              </div>

              <div class="col-sm-3 pt-2" id="addSimilarDiv">
                <button
                  type="button"
                  id="addSimilar"
                  class="btn btn-outline-success"
                >
                  Adicionar
                </button>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
    <script src="/assets/dist/js/bootstrap.bundle.min.js"></script>

    <script
      src="https://cdn.jsdelivr.net/npm/chart.js@4.2.1/dist/chart.umd.min.js"
      integrity="sha384-gdQErvCNWvHQZj6XZM0dNsAoY4v+j5P1XDpNkcM3HJG1Yx04ecqIHk7+4VBOCHOG"
      crossorigin="anonymous"
    ></script>
    <script>
      let similarCount = 2;
      document
        .getElementById("addSimilar")
        .addEventListener("click", () => renderNewSimilarInput());
      function renderNewSimilarInput() {
        const removeDiv = document.createElement("div");
        removeDiv.setAttribute("class", "col-sm-3 pt-2");

        const similarDiv = document.getElementById("similarDiv");
        similarDiv.appendChild(removeDiv);

        const removeButton = document.createElement("button");
        removeButton.setAttribute("class", "btn btn-outline-danger");
        removeButton.setAttribute("type", "button");
        removeButton.setAttribute("rownumber", similarCount - 1);
        removeButton.setAttribute("onclick", "removeSimilar(this)");
        removeButton.innerHTML = "Remover";
        removeDiv.appendChild(removeButton);

        const inputDiv = document.createElement("div");
        inputDiv.setAttribute("class", "col-sm-3 p-2");
        inputDiv.setAttribute("id", "similarInputDiv" + similarCount);

        const input = document.createElement("input");
        input.setAttribute("type", "text");
        input.setAttribute("class", "form-control");
        input.setAttribute("name", "similarInput");
        input.setAttribute("id", "similarInput" + similarCount);
        input.setAttribute("onkeydown", "testForRender(event)");

        inputDiv.appendChild(input);

        similarDiv.appendChild(inputDiv);

        const buttonDiv = document.getElementById("addSimilarDiv");

        buttonDiv.remove();

        similarDiv.appendChild(buttonDiv);
        input.focus();
        similarCount++;
      }
      function testForRender(event) {
        if (event.key === "Enter" || event.keyCode === 13) {
          renderNewSimilarInput();
        }
      }
      function removeSimilar(element) {
        const number = element.getAttribute("rownumber");
        document.getElementById("similarInputDiv" + number).remove();
        element.parentElement.remove();
        document.getElementById("similarInput" + (similarCount - 1)).focus();
      }
      const modal = document.getElementById("placesModal");
      document.addEventListener("DOMContentLoaded", () => {
        fetch("/api/v1/context", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }).then(async (response) => {
          if (response.status == 201 || response.status == 200) {
            renderContexts(await response.json());
          }
          if (response.status == 404) {
            console.log(await response.json());
          }
        });
      });

      document.getElementById("imageInput").addEventListener(
        "change",
        (e) => {
          const element = document.getElementById("imageInput");
          if (element.files && element.files[0]) {
            var file = new FileReader();
            file.onload = function (e) {
              document
                .getElementById("preview")
                .setAttribute("src", e.target.result);
              document
                .getElementById("uploadText")
                .setAttribute("hidden", "true");
              document
                .getElementById("uploadIcon")
                .setAttribute("hidden", "true");
            };
            file.readAsDataURL(element.files[0]);
          }
        },
        false
      );

      let idPlace = 0;
      function selectAmbient(id, name) {
        document.getElementById("placesButton").innerHTML = name;
        idPlace = id;
      }

      document.getElementById("saveButton").addEventListener("click", () => {
        if (idPlace == 0) {
          //Aqui tem que retornar um erro
          //Paramos aqui, faça o front retornar um erro quando o place não estiver selecionado
          //E faça retornar uma mensagem de sucesso quando inserir com sucesso
          //Limpe os campos se o response for 201
          console.log("não passou");

          return 0;
        }
        const similars = document.getElementsByName("similarInput");
        const similarIds = Array();
        if (similars.length > 0) {
          similars.forEach((similar) => {
            console.log(similar.value == "");
            if (!similarIds.includes(similar.value) && similar.value != "") {
              similarIds.push(similar.value);
            }
          });
        }
        const objectName = document.getElementById("objectName");
        const description = document.getElementById("description");
        const objectId = document.getElementById("objectId");
        const imageInput = document.getElementById("imageInput");

        const formData = new FormData();

        formData.append("id", objectId.value);
        formData.append("idPlace", idPlace);
        formData.append("name", objectName.value);
        formData.append("description", description.value);
        formData.append("similars", JSON.stringify(similarIds));
        formData.append("image", imageInput.files[0]);

        fetch("/api/v1/object", {
          method: "POST",
          body: formData,
        })
          .then(async (response) => {
            if (response.status == 200 || response.status == 201) {
              console.log(await response.json());
            }
          })
          .catch((error) => {
            //Ocorreu um erro
            console.log(error);
          });
      });
      function renderContexts(data) {
        const contextList = document.getElementById("contextList");
        contextList.innerHTML = "";
        data.forEach((context) => {
          const li = document.createElement("li");
          const a = document.createElement("a");
          //class="dropdown-item" onclick="selectContext(this)
          a.setAttribute("class", "dropdown-item");
          a.innerHTML = context.name;
          a.setAttribute("value", context.id);
          a.setAttribute("onclick", "selectContext(this)");
          li.appendChild(a);
          contextList.appendChild(li);
        });
      }
      function selectContext(element) {
        document.getElementById("contextButton").innerHTML = element.innerHTML;
        fetch("/api/v1/place?context=" + element.getAttribute("value"), {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }).then(async (response) => {
          renderPlaces(await response.json());
        });
      }

      function renderPlaces(places) {
        savePlaces(places);
        filterPlaces("", Array());
        idPlace = 0;
        const placesButton = document.getElementById("placesButton");
        placesButton.removeAttribute("hidden");
        placesButton.innerHTML = "Selecione um ambiente";
        places.forEach((place) => {
          document.getElementById("placeList").innerHTML += cardBuilder(place);
        });
      }
      function cardBuilder(place) {
        return (
          '<div class="col">' +
          '<div class="card" data-bs-dismiss="modal" onclick="selectAmbient(' +
          `${place.id},'${place.name}'` +
          ');">' +
          "<img" +
          ' src="/assets/images/Sesi-SP.jpg"' +
          ' class="card-img-top"' +
          ' alt="..."' +
          "/>" +
          '<div class="card-body">' +
          '<h5 class="card-title">' +
          place.name +
          "</h5>" +
          "</div>" +
          "</div>" +
          "</div>"
        );
      }
      let savedPlaces = Array();
      function savePlaces(places) {
        savedPlaces = places;
      }
      function filterPlaces(search, places) {
        placeList.innerHTML = "";

        const filteredPlaces = places.filter((place) => {
          return (
            place.name.toLowerCase().includes(search.toLowerCase()) ||
            place.vid.includes(search)
          );
        });

        filteredPlaces.forEach((place) => {
          placeList.innerHTML += cardBuilder(place);
        });
      }
      searchBar.addEventListener("input", () => {
        const searchTerm = searchBar.value;
        filterPlaces(searchTerm, savedPlaces);
      });
      filterPlaces("", Array());

      document.getElementById("btnSimilar").addEventListener("click", () => {
        document.getElementById("similarDiv").removeAttribute("hidden");
        document
          .getElementById("similarInput1")
          .setAttribute("name", "similarInput");
      });

      function datetime(data) {
        const date = data.toString().split("-");
        return (
          date[2].split("T")[0] +
          "/" +
          date[1] +
          "/" +
          date[0] +
          " às " +
          date[2].split("T")[1].split(":")[0] +
          ":" +
          date[2].split("T")[1].split(":")[1]
        );
      }
    </script>
    <script src="/assets/js/dashboard.js"></script>
  </body>
</html>
