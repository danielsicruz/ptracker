<!DOCTYPE html>
<html lang="pt-br" data-bs-theme="auto">
  <head>
    <script src="/assets/js/color-modes.js"></script>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="" />
    <meta
      name="author"
      content="Mark Otto, Jacob Thornton, and Bootstrap contributors"
    />
    <meta name="generator" content="Hugo 0.115.4" />
    <title><%- pageName %> · Ptracker</title>

    <link
      rel="canonical"
      href="https://getbootstrap.com/docs/5.3/examples/dashboard/"
    />

    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@docsearch/css@3"
    />

    <link href="/assets/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Custom styles for this template -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css"
      rel="stylesheet"
    />
    <!-- Custom styles for this template -->
    <link href="/assets/css/dashboard.css" rel="stylesheet" />
    <link href="/assets/css/style.css" rel="stylesheet" />
  </head>

  <body>
    <%- include('./components/modalMovements') %> <%-
    include('./components/themeSwitch') %>

    <header
      class="navbar sticky-top bg-dark flex-md-nowrap p-0 shadow"
      data-bs-theme="dark"
    >
      <a
        class="navbar-brand col-md-3 col-lg-2 me-0 px-3 fs-6 text-white"
        href="#"
        ><img src="/assets/images/Sesi-SP.jpg" width="130px"
      /></a>

      <ul class="navbar-nav flex-row d-md-none">
        <li class="nav-item text-nowrap">
          <button
            class="nav-link px-3 text-white"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSearch"
            aria-controls="navbarSearch"
            aria-expanded="false"
            aria-label="Toggle search"
          >
            <svg class="bi">
              <use xlink:href="#search" />
            </svg>
          </button>
        </li>
        <li class="nav-item text-nowrap">
          <button
            class="nav-link px-3 text-white"
            type="button"
            data-bs-toggle="offcanvas"
            data-bs-target="#sidebarMenu"
            aria-controls="sidebarMenu"
            aria-expanded="false"
            aria-label="Toggle navigation"
          >
            <svg class="bi">
              <use xlink:href="#list" />
            </svg>
          </button>
        </li>
      </ul>

      <div id="navbarSearch" class="navbar-search w-100 collapse">
        <input
          class="form-control w-100 rounded-0 border-0"
          type="text"
          placeholder="Search"
          aria-label="Search"
        />
      </div>
    </header>

    <div class="container-fluid">
      <div class="row">
        <%- include('./components/sidebar') %>

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
          <div class="container">
            <div class="row">
              <div class="row">
                <h3 class="pt-3">Verificando objetos</h3>
                <div class="input-group p-4">
                  <input
                    type="text"
                    class="form-control"
                    id="insertBox"
                    placeholder="Número de Id"
                    aria-label="Número de identificação do objeto"
                  />

                  <button
                    class="btn btn-outline-success px-4 col-3 mx-auto"
                    type="button"
                    id="searchButton"
                  >
                    Verificar
                  </button>
                </div>
              </div>
              <div id="notFound" hidden><h4>Objeto não encontrado</h4></div>

              <div id="objectData" class="row row-cols-1 row-cols-md-3 g-4">
                <div id="imgDiv" class="col-md-5 col-lg-4 order-md-last">
                  <%- include('./components/loading') %>
                </div>
                <div class="col-md-7 col-lg-8">
                  <form class="needs-validation" novalidate>
                    <div class="row g-3">
                      <div class="col-sm-6">
                        <label for="objectId" class="form-label">Id</label>
                        <input
                          type="text"
                          class="form-control"
                          id="objectId"
                          disabled
                          placeholder=""
                          value=""
                          required
                        />
                      </div>

                      <div class="col-sm-6">
                        <label for="objectName" class="form-label">Nome</label>
                        <input
                          type="text"
                          class="form-control"
                          id="objectName"
                          placeholder=""
                          value=""
                          disabled
                          required
                        />
                      </div>

                      <div class="col-12">
                        <label for="description" class="form-label"
                          >Descrição</label
                        >
                        <div class="input-group has-validation">
                          <input
                            type="text"
                            class="form-control"
                            id="description"
                            placeholder=""
                            disabled
                            required
                          />
                        </div>
                      </div>

                      <div class="col-12">
                        <label for="createdAt" class="form-label"
                          >Inserido em</label
                        >
                        <input
                          type="datetime"
                          class="form-control"
                          disabled
                          id="createdAt"
                        />
                      </div>
                    </div>
                  </form>
                  <div class="mx-auto pt-3 text-center">
                    <button
                      class="btn btn-secondary"
                      id="btnHistory"
                      disabled
                      data-bs-toggle="modal"
                      data-bs-target="#movementsModal"
                    >
                      Clique aqui para ver histórico de movimentação
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>
    <script src="/assets/dist/js/bootstrap.bundle.min.js"></script>

    <script
      src="https://cdn.jsdelivr.net/npm/chart.js@4.2.1/dist/chart.umd.min.js"
      integrity="sha384-gdQErvCNWvHQZj6XZM0dNsAoY4v+j5P1XDpNkcM3HJG1Yx04ecqIHk7+4VBOCHOG"
      crossorigin="anonymous"
    ></script>
    <script>
      document.getElementById("searchButton").addEventListener("click", () => {
        search();
      });
      insertBox.addEventListener("keydown", (event) => {
        if (event.key === "Enter" || event.keyCode === 13) {
          search();
        }
      });
      function search() {
        const id = document.getElementById("insertBox").value;
        const notFound = document.getElementById("notFound");
        try {
          fetch("/api/v1/object/" + id, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          }).then(async (response) => {
            if (response.status === 201 || response.status === 200) {
              // document
              //   .getElementById("mFVLoading")
              //   .setAttribute("hidden", "true");
              // document
              //   .getElementById("mFVSuccessEnd")
              //   .removeAttribute("hidden");
              notFound.setAttribute("hidden", "true");
              render(await response.json());
            } else {
              // document
              //   .getElementById("mFVLoading")
              //   .setAttribute("hidden", "true");
              // document.getElementById("mFVErrorEnd").removeAttribute("hidden");
            }
            if (response.status === 404) {
              notFound.removeAttribute("hidden");
              render("clear");
            }
          });
        } catch (error) {
          // document.getElementById("mFVLoading").setAttribute("hidden", "true");
          // document.getElementById("mFVErrorEnd").removeAttribute("hidden");
          //Algo deu errado
          console.log(error);
        }
      }
      function render(data) {
        if (data == "clear") {
          document.getElementById("objectId").value = "";
          document.getElementById("objectName").value = "";
          document.getElementById("description").value = "";
          document.getElementById("createdAt").value = "";
          document.getElementById("objectImage").setAttribute("src", "");
          document
            .getElementById("imgDiv")
            .setAttribute(
              "class",
              "img-not-found col-md-5 col-lg-4 order-md-last mx-auto"
            );
          document
            .getElementById("btnHistory")
            .setAttribute("disabled", "true");
        } else {
          document.getElementById("objectId").value = data.id;
          document.getElementById("objectName").value = data.name;
          document.getElementById("description").value = data.description;
          document.getElementById("createdAt").value = datetime(data.createdAt);
          document.getElementById("btnHistory").removeAttribute("disabled");
          document.getElementById("movementsModalLabel").innerHTML =
            "Movimentação de " + data.name + " - ID:" + data.id;

          const imgDiv = document.getElementById("imgDiv");
          imgDiv.innerHTML =
            '<img class="img-fluid" src="" alt="" id="objectImage"/>';
          if (data.imagePath != null) {
            imgDiv.setAttribute("class", "col-md-5 col-lg-4 order-md-last");
            const imgTag = document.getElementById("objectImage");
            imgTag.setAttribute("src", data.imagePath);

            imgTag.onerror = () => {
              imgDiv.setAttribute(
                "class",
                "img-not-found col-md-5 col-lg-4 order-md-last mx-auto"
              );
            };
          } else {
            imgDiv.setAttribute(
              "class",
              "img-not-found col-md-5 col-lg-4 order-md-last mx-auto"
            );
          }
        }
      }
      let movementsData = Array();
      document.getElementById("btnHistory").addEventListener("click", () => {
        const id = document.getElementById("objectId").value;
        fetch("/api/v1/movement?idObject=" + id, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }).then(async (response) => {
          if (response.status == 201 || response.status == 200) {
            movementsData = await response.json();
          }
          if (response.status == 404) {
            console.log(await response.json());
          }
        });

        fetch("/api/v1/object/" + id, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });
      });
      const modal = document.getElementById("movementsModal");
      modal.addEventListener("shown.bs.modal", () => {
        if (movementsData.length > 0) {
          const tbMovimentsBody = document.getElementById("movementsBody");
          tbMovimentsBody.innerHTML = "";
          const pages = Math.ceil(movementsData.length / 10);
          movementsData.forEach((movement) => {
            const row = document.createElement("tr");
            const td1 = document.createElement("td");
            const td2 = document.createElement("td");
            const td3 = document.createElement("td");
            const td4 = document.createElement("td");
            const td5 = document.createElement("td");
            const td6 = document.createElement("td");
            const td7 = document.createElement("td");
            const td8 = document.createElement("td");
            const td9 = document.createElement("td");
            td1.innerHTML = movement.id;
            td2.innerHTML =
              movement.fromPlace.name +
              " em " +
              movement.fromPlace.contextPlace.name;
            td3.innerHTML =
              movement.toPlace.name +
              " em " +
              movement.toPlace.contextPlace.name;
            td4.innerHTML = movement.User.name;
            td5.innerHTML = datetime(movement.createdAt);
            if (movement.temporary) {
              td6.innerHTML = "Sim";
              td7.innerHTML = datetime(movement.whenBack);
              td8.innerHTML = movement.isBack ? "Sim" : "Não";
              td9.innerHTML = movement.isBack
                ? datetime(movement.updatedAt)
                : "Aguardando";
            } else {
              td6.innerHTML = "Não";
              td7.innerHTML = "Não se aplica";
              td8.innerHTML = "Não se aplica";
              td9.innerHTML = "Não se aplica";
            }
            row.appendChild(td1);
            row.appendChild(td2);
            row.appendChild(td3);
            row.appendChild(td4);
            row.appendChild(td5);
            row.appendChild(td6);
            row.appendChild(td7);
            row.appendChild(td8);
            row.appendChild(td9);
            tbMovimentsBody.appendChild(row);
          });
        }
      });
      function datetime(data) {
        const date = data.toString().split("-");

        return (
          date[2].split("T")[0] +
          "/" +
          date[1] +
          "/" +
          date[0] +
          " às " +
          date[2].split("T")[1].split(":")[0] +
          ":" +
          date[2].split("T")[1].split(":")[1]
        );
      }
    </script>
    <script src="/assets/js/dashboard.js"></script>
  </body>
</html>
